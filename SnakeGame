import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

//This is experimental code
public class SnakeGame extends JPanel implements ActionListener, KeyListener, MouseMotionListener {

    private Timer timer;
    private final int TILE_SIZE = 20;
    private final int ROWS = 15;
    private final int COLS = 18;
    private int direction = 0; // 0=right, 1=down, 2=left, 3=up
    private ArrayList<Point> snake;
    private Point apple;
    private boolean gameRunning = false;
    private int score = 0;
    private Random rand;

    public SnakeGame() {
        setPreferredSize(new Dimension(400, 400));
        setBackground(new Color(170, 215, 81));
        setFocusable(true);
        addKeyListener(this);
        addMouseMotionListener(this);

        timer = new Timer(500, this);
        rand = new Random();

        initGame();
        timer.start();
    }

    private void initGame() {
        snake = new ArrayList<>();
        snake.add(new Point(9, 8));
        snake.add(new Point(8, 8));
        snake.add(new Point(7, 8));

        spawnApple();
    }

    private void spawnApple() {
        while (true) {
            int x = rand.nextInt(COLS);
            int y = rand.nextInt(ROWS);
            Point p = new Point(x, y);
            if (!snake.contains(p)) {
                apple = p;
                break;
            }
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawCheckerboard(g);
        drawBorders(g);
        drawSnake(g);
        drawApple(g);

        if (!gameRunning) {
            drawStartScreen(g);
        }
    }

    private void drawCheckerboard(Graphics g) {
        Color evenColor = new Color(162, 209, 73);
        Color oddColor = new Color(170, 215, 81);
        for (int y = 0; y < ROWS; y++) {
            for (int x = 0; x < COLS; x++) {
                if ((x + y) % 2 == 0)
                    g.setColor(evenColor);
                else
                    g.setColor(oddColor);
                g.fillRect(x * TILE_SIZE + 20, y * TILE_SIZE + 80, TILE_SIZE, TILE_SIZE);
            }
        }
    }

    private void drawBorders(Graphics g) {
        g.setColor(new Color(87, 138, 52));
        g.fillRect(10, 60, 20, 340);
        g.fillRect(390, 60, 20, 340);
        g.fillRect(20, 70, 360, 20);
        g.fillRect(20, 390, 360, 20);
        g.setColor(new Color(74, 117, 44));
        g.fillRect(0, 30, 400, 60);
    }

    private void drawSnake(Graphics g) {
        g.setColor(Color.BLUE);
        for (Point p : snake) {
            g.fillRect(p.x * TILE_SIZE + 20, p.y * TILE_SIZE + 80, TILE_SIZE, TILE_SIZE);
        }
    }

    private void drawApple(Graphics g) {
        g.setColor(Color.RED);
        g.fillOval(apple.x * TILE_SIZE + 20, apple.y * TILE_SIZE + 80, TILE_SIZE, TILE_SIZE);
    }

    private void drawStartScreen(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(80, 140, 240, 120);
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.BOLD, 24));
        g.drawString("Move Mouse to Start!", 100, 200);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameRunning) {
            repaint();
            return;
        }

        // Move snake
        Point head = new Point(snake.get(0));
        switch (direction) {
            case 0 -> head.x += 1;
            case 1 -> head.y += 1;
            case 2 -> head.x -= 1;
            case 3 -> head.y -= 1;
        }

        // Check for collisions
        if (head.x < 0 || head.x >= COLS || head.y < 0 || head.y >= ROWS || snake.contains(head)) {
            timer.stop();
            repaint();
            return;
        }

        snake.add(0, head);

        // Check for apple
        if (head.equals(apple)) {
            score++;
            spawnApple();
        } else {
            snake.remove(snake.size() - 1);
        }

        repaint();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_LEFT && direction != 0) direction = 2;
        if (key == KeyEvent.VK_RIGHT && direction != 2) direction = 0;
        if (key == KeyEvent.VK_UP && direction != 1) direction = 3;
        if (key == KeyEvent.VK_DOWN && direction != 3) direction = 1;
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}

    @Override
    public void mouseMoved(MouseEvent e) {
        if (!gameRunning) {
            gameRunning = true;
        }
    }

    @Override public void mouseDragged(MouseEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame gamePanel = new SnakeGame();
        frame.add(gamePanel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
